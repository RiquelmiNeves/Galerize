Documenta√ß√£o do Projeto: Galeria de Fotos Pessoal
Este documento detalha a arquitetura, funcionalidades e implementa√ß√£o do projeto de Galeria de Fotos Pessoal, desenvolvido com Django. O objetivo principal √© permitir que usu√°rios fa√ßam upload, visualizem, editem, excluam e filtrem suas fotos de forma intuitiva e organizada. A funcionalidade anterior de "notas" foi removida para focar exclusivamente na gest√£o de imagens.

üöÄ Vis√£o Geral do Projeto
O projeto oferece uma plataforma web para que cada usu√°rio autenticado tenha sua pr√≥pria galeria de fotos.

‚ú® Principais Funcionalidades
Autentica√ß√£o de Usu√°rios: Login, cadastro e logout de usu√°rios.

Upload de Fotos: Envio de novas imagens com t√≠tulo, descri√ß√£o e tags.

Galeria de Fotos: Visualiza√ß√£o de todas as fotos do usu√°rio em um layout responsivo.

Edi√ß√£o de Fotos: Altera√ß√£o dos metadados (t√≠tulo, descri√ß√£o, tags) de fotos existentes.

Exclus√£o de Fotos: Remo√ß√£o de fotos da galeria e do armazenamento f√≠sico.

Filtro Avan√ßado de Fotos: P√°gina dedicada para pesquisar fotos por t√≠tulo, tags ou data de upload.

Favicon Personalizado: √çcone na aba do navegador para identifica√ß√£o do site.

P√°gina 404 Personalizada: Mensagem amig√°vel para URLs n√£o encontradas.

üèõÔ∏è Arquitetura e Armazenamento de Dados
O projeto utiliza o framework web Django para o backend, com a seguinte estrutura de armazenamento:

Django Framework: Base para o desenvolvimento web, gerenciando views, URLs, modelos e templates.

Banco de Dados (SQLite): O db.sqlite3 (ou outro SGBD configurado) √© utilizado para armazenar os metadados das fotos (t√≠tulo, descri√ß√£o, tags, ID do usu√°rio, data de upload) e o caminho relativo para o arquivo de imagem. Importante: Os dados bin√°rios das imagens (as fotos em si) n√£o s√£o armazenados diretamente no banco de dados.

Sistema de Arquivos: As imagens reais s√£o salvas fisicamente no disco r√≠gido do servidor (ou computador local em desenvolvimento). O diret√≥rio de armazenamento √© configurado atrav√©s de MEDIA_ROOT no settings.py.

üì∏ Como o Armazenamento de Imagens Funciona
O processo de upload e armazenamento de imagens √© central para a aplica√ß√£o e segue as melhores pr√°ticas do Django:

Campo ImageField no Modelo (usuarios/models.py):

O modelo Foto possui um campo imagem = models.ImageField(upload_to='fotos/').

ImageField √© um tipo de campo espec√≠fico do Django para lidar com uploads de arquivos de imagem.

upload_to='fotos/' instrui o Django a criar uma subpasta chamada fotos dentro do diret√≥rio MEDIA_ROOT e salvar os arquivos de imagem l√°.

Configura√ß√µes MEDIA_ROOT e MEDIA_URL (seu_projeto/settings.py):

MEDIA_ROOT: Define o caminho absoluto no sistema de arquivos onde todos os arquivos de m√≠dia (incluindo as fotos) ser√£o armazenados. Ex: /home/usuario/seu_projeto/media/.

MEDIA_URL: Define a URL base que ser√° usada para acessar esses arquivos de m√≠dia atrav√©s do navegador. Ex: /media/.

Quando uma imagem √© salva, o Django a coloca em MEDIA_ROOT/fotos/nome_do_arquivo.jpg, e a URL para acess√°-la ser√° MEDIA_URL/fotos/nome_do_arquivo.jpg.

Processo de Upload na View (usuarios/views.py - upload_foto):

O formul√°rio HTML (upload_foto.html) deve ter enctype="multipart/form-data" para permitir o envio de arquivos.

Na view upload_foto, o arquivo √© recebido via request.FILES.get('imagem').

Ao criar uma nova inst√¢ncia do modelo Foto e atribuir imagem=imagem_file, e em seguida chamar nova_foto.save(), o Django automaticamente:

Salva o arquivo de imagem no diret√≥rio MEDIA_ROOT/fotos/.

Armazena o caminho relativo do arquivo (ex: fotos/nome_do_arquivo.jpg) no campo imagem do registro no banco de dados.

Acessando a Imagem no Template (.url):

Quando um objeto Foto √© recuperado do banco de dados (ex: foto_obj), o campo foto_obj.imagem √© um objeto que representa o arquivo.

A propriedade .url (ex: foto_obj.imagem.url) √© automaticamente gerada pelo Django para fornecer a URL completa do arquivo de imagem, permitindo que o navegador a exiba.

üì¶ A Biblioteca Pillow
A biblioteca Pillow (pip install Pillow) √© um pr√©-requisito essencial para o Django quando se trabalha com ImageField. Embora n√£o seja explicitamente chamada em cada linha do seu views.py para salvar a imagem, ela √© fundamental nos bastidores para:

Processamento de Imagem: Redimensionamento, corte, convers√£o de formatos, etc.

Valida√ß√£o: Verificar se o arquivo enviado √© realmente uma imagem v√°lida.

Manipula√ß√£o Interna: O ImageField do Django utiliza o Pillow para lidar com as opera√ß√µes de arquivo de imagem.

üõ†Ô∏è Configura√ß√£o e Instala√ß√£o do Projeto
Siga estes passos para configurar e executar o projeto em seu ambiente local.

Pr√©-requisitos
Python 3.x

pip (gerenciador de pacotes do Python)

üöÄ Instala√ß√£o
Clone o Reposit√≥rio (se aplic√°vel):

git clone <url_do_seu_repositorio>
cd <nome_da_pasta_do_projeto>

Crie e Ative um Ambiente Virtual (Recomendado):

python -m venv venv
# No Windows:
venv\Scripts\activate
# No macOS/Linux:
source venv/bin/activate

Instale as Depend√™ncias:

pip install Django Pillow

Configura√ß√µes de M√≠dia e Est√°ticos (seu_projeto/settings.py):
Abra seu_projeto/settings.py (o arquivo settings.py que est√° na pasta principal do seu projeto, ex: Galerize/novosite/settings.py).
Adicione ou verifique as seguintes linhas no final do arquivo:

import os # Certifique-se de que esta linha est√° no topo do arquivo

# Diret√≥rio base do projeto (geralmente j√° configurado)
# BASE_DIR = Path(__file__).resolve().parent.parent # Para Django 3.x+
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) # Para Django mais antigos

# Configura√ß√µes de M√≠dia (Uploads de Usu√°rios)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Configura√ß√µes de Arquivos Est√°ticos (CSS, JS, Imagens de Tema)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # Aponta para a pasta 'static' na raiz do seu projeto
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Usado para 'collectstatic' em produ√ß√£o

# Configura√ß√£o de Templates para encontrar templates na raiz do projeto (para 404.html)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Adicione esta linha
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Para a p√°gina 404 personalizada (apenas para teste em desenvolvimento)
# N√ÉO DEIXE DEBUG = False EM PRODU√á√ÉO SEM CONFIGURA√á√ÉO ADEQUADA DE ALLOWED_HOSTS
# DEBUG = False
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost'] # Ou o IP/dom√≠nio do seu servidor

Configura√ß√µes de URLs (seu_projeto/urls.py):
Abra seu_projeto/urls.py (o arquivo urls.py que est√° na pasta principal do seu projeto).
Adicione as importa√ß√µes e as linhas no final de urlpatterns para servir arquivos est√°ticos e de m√≠dia em desenvolvimento:

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('usuarios.urls')), # Inclua suas URLs do app 'usuarios'
]

# Configura√ß√£o para servir arquivos est√°ticos e de m√≠dia em ambiente de desenvolvimento
if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

Crie as Pastas Necess√°rias:
Na raiz do seu projeto, crie as seguintes pastas se ainda n√£o existirem:

media/

static/

templates/

Mova Arquivos Est√°ticos:
Certifique-se de que seu bootstrap.min.css est√° em static/css/ e seu favicon.ico est√° em static/.

Realize as Migra√ß√µes do Banco de Dados:

Aten√ß√£o: Se voc√™ j√° tinha dados e estava usando UUIDs e agora mudou para IDs num√©ricos auto-incrementais, voc√™ precisar√° excluir seus arquivos de migra√ß√£o em usuarios/migrations/ (exceto __init__.py) e excluir seu db.sqlite3 antes de rodar os comandos abaixo. Isso apagar√° todos os dados existentes.

python manage.py makemigrations usuarios
python manage.py migrate

Crie um Superusu√°rio (se voc√™ recriou o banco de dados):

python manage.py createsuperuser

Siga as instru√ß√µes para criar suas credenciais de administrador.

‚ñ∂Ô∏è Executando o Projeto
Inicie o servidor de desenvolvimento Django:

python manage.py runserver

Acesse o site no seu navegador: http://127.0.0.1:8000/login/ (ou a URL que voc√™ configurou para o login).

üíª Detalhes da Implementa√ß√£o por Arquivo
usuarios/models.py
from django.db import models
from django.contrib.auth.models import User

class Foto(models.Model):
    # Chave prim√°ria auto-incremental (padr√£o do Django)
    # O campo 'id' ser√° criado automaticamente como um AutoField.
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=255)
    descricao = models.TextField(blank=True, null=True)
    imagem = models.ImageField(upload_to='fotos/') # Salva em MEDIA_ROOT/fotos/
    tags = models.CharField(max_length=255, blank=True, null=True, help_text="Separe as tags por v√≠rgulas")
    data_upload = models.DateTimeField(auto_now_add=True) # Data e hora de cria√ß√£o autom√°tica

    def __str__(self):
        return self.titulo

Foto Model: Define a estrutura dos dados para cada foto, incluindo o relacionamento com o usu√°rio (ForeignKey) e o campo ImageField para o arquivo da imagem. O ID √© num√©rico e auto-incremental por padr√£o.

usuarios/views.py
Cont√©m toda a l√≥gica de backend para as funcionalidades da aplica√ß√£o.

login(request): Autentica o usu√°rio e redireciona para a p√°gina home em caso de sucesso.

logout(request): Desloga o usu√°rio e redireciona para a p√°gina de login.

cadastro(request): Cria um novo usu√°rio e, em caso de sucesso, loga-o e redireciona para home.

home(request): Se o usu√°rio estiver autenticado, renderiza o template home.html (com os cards de navega√ß√£o). Caso contr√°rio, redireciona para login.

upload_foto(request):

Processa o formul√°rio de upload.

Recebe o arquivo de imagem via request.FILES.

Formata as tags (adicionando # e juntando-as em uma string).

Cria e salva uma nova inst√¢ncia do modelo Foto no banco de dados, o que tamb√©m salva o arquivo de imagem no MEDIA_ROOT.

galeria(request):

Recupera todas as fotos do usu√°rio logado, ordenadas pela data de upload mais recente.

Implementa uma busca b√°sica por t√≠tulo/descri√ß√£o e tags (usando Q objects para consultas complexas).

Processa as tags para exibi√ß√£o no template (lista para itera√ß√£o, string para exibi√ß√£o simples).

Passa o foto_obj.imagem.url para o template para exibi√ß√£o da imagem.

editar_foto_verificacao(request, id_foto):

Recupera uma foto espec√≠fica pelo id_foto e verifica se pertence ao usu√°rio logado.

Prepara a string de tags para preencher o campo de input no formul√°rio de edi√ß√£o (removendo #).

Renderiza editar_foto.html, passando o objeto foto completo.

editar_foto(request, id_foto):

Processa a submiss√£o do formul√°rio de edi√ß√£o.

Atualiza o t√≠tulo, descri√ß√£o e tags da foto no banco de dados.

Redireciona para a galeria.

excluir_foto_verificacao(request, id_foto):

Recupera uma foto espec√≠fica e verifica a permiss√£o.

Renderiza excluir_foto.html para confirma√ß√£o da exclus√£o.

excluir_foto(request, id_foto):

Processa a confirma√ß√£o de exclus√£o.

Deleta o objeto Foto do banco de dados, o que tamb√©m aciona a exclus√£o do arquivo f√≠sico associado ao ImageField.

filtrar_fotos(request):

Nova view dedicada √† funcionalidade de filtro avan√ßado.

Recupera as 15 fotos mais recentes por padr√£o se nenhum filtro for aplicado.

Permite filtrar por titulo, tags ou data (usando Q objects para combinar filtros).

Renderiza filtrar_fotos.html com os resultados.

usuarios/urls.py
Define os mapeamentos de URL para as views do aplicativo usuarios.

from django.urls import path
from . import views

urlpatterns = [
    path('login/', views.login, name = 'login'),
    path('cadastro/', views.cadastro, name = 'cadastro'),
    path('home/', views.home, name = 'home'),
    path('logout/', views.logout, name = 'logout'),
    
    path('upload_foto/', views.upload_foto, name='upload_foto'),
    path('galeria/', views.galeria, name='galeria'),
    path('editar_foto_verificacao/<int:id_foto>/', views.editar_foto_verificacao, name='editar_foto_verificacao'),
    path('editar_foto/<int:id_foto>/', views.editar_foto, name='editar_foto'),
    path('excluir_foto_verificacao/<int:id_foto>/', views.excluir_foto_verificacao, name='excluir_foto_verificacao'),
    path('excluir_foto/<int:id_foto>/', views.excluir_foto, name='excluir_foto'),
    path('filtrar_fotos/', views.filtrar_fotos, name='filtrar_fotos'),
]

Templates HTML (usuarios/templates/usuarios/)
Os templates s√£o respons√°veis pela interface do usu√°rio e usam Bootstrap para estiliza√ß√£o responsiva.

base.html:

Template base que define a estrutura comum (cabe√ßalho, navbar, footer, inclus√£o de Bootstrap).

Inclui links de navega√ß√£o para home, upload_foto, galeria, filtrar_fotos e logout.

Define o favicon do site.

Cont√©m o bloco {% block conteudo %} onde o conte√∫do espec√≠fico de cada p√°gina √© inserido.

Possui cards de navega√ß√£o na p√°gina inicial para "Upload de Fotos", "Galeria de Fotos" e "Filtrar Fotos".

login.html: Formul√°rio de login com campos para e-mail e senha, e um bot√£o para ir ao cadastro.

cadastro.html: Formul√°rio de cadastro com campos para nome, e-mail e senha, e um bot√£o para ir ao login.

upload_foto.html:

Formul√°rio para enviar novas fotos.

Possui enctype="multipart/form-data" para permitir o upload de arquivos.

Inclui um script JavaScript para exibir uma pr√©via da imagem selecionada antes do upload.

galeria.html:

Exibe as fotos do usu√°rio em um layout de grade responsivo (cards).

Cada card de foto mostra t√≠tulo, descri√ß√£o, tags e data de upload.

Bot√µes "Editar" e "Excluir" em cada card, que levam √†s respectivas p√°ginas de gerenciamento.

Se√ß√£o para tags clic√°veis que filtram a galeria.

editar_foto.html:

Formul√°rio para editar os metadados de uma foto.

Exibe a imagem da foto atual usando {{ foto.imagem.url }} para que o usu√°rio saiba qual foto est√° editando, mas n√£o permite a troca da imagem.

Campos pr√©-preenchidos com os dados existentes.

excluir_foto.html:

P√°gina de confirma√ß√£o para excluir uma foto.

Exibe a imagem da foto usando {{ foto.imagem.url }} para confirma√ß√£o visual.

Bot√µes "Sim, Excluir Foto" e "N√£o, Voltar".

filtrar_fotos.html:

P√°gina dedicada para pesquisar fotos.

Apresenta os 15 resultados mais recentes por padr√£o.

Possui campos de input separados para filtrar por t√≠tulo, tags e data (com seletor de calend√°rio).

Exibe os resultados em um formato de lista vertical, com imagem, t√≠tulo, tags, data e bot√µes de "Editar" e "Apagar" para cada item.

templates/404.html (P√°gina de Erro Personalizada)
Localizado na pasta templates/ na raiz do projeto.

Exibido pelo Django quando uma URL n√£o √© encontrada (DEBUG = False).

Inclui um bot√£o para retornar √† p√°gina inicial.

‚úÖ Testes e Verifica√ß√µes Finais
Ap√≥s qualquer altera√ß√£o, especialmente em settings.py, urls.py, models.py ou views.py, siga estes passos:

Reinicie o servidor Django: python manage.py runserver

Limpe o cache do navegador: Pressione Ctrl + Shift + R (ou Cmd + Shift + R no Mac) em suas p√°ginas.

Teste o fluxo completo: Login, cadastro, upload de novas fotos, visualiza√ß√£o na galeria, edi√ß√£o, exclus√£o e uso do filtro.

Verifique a pasta media/fotos/: Ap√≥s o upload, confirme se o arquivo da imagem est√° fisicamente l√°.

Verifique o painel /admin: Confirme se os registros das fotos est√£o corretos e se o campo "Imagem" est√° preenchido e √© clic√°vel.

Com esta documenta√ß√£o abrangente, voc√™ tem um guia completo para entender e gerenciar seu projeto de Galeria de Fotos Pessoal.